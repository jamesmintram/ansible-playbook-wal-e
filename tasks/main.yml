---
# tasks file for wal_e

- name: Install dependency packages
  package: update_cache=true name="{{ item }}"
  with_items: "{{ wal_e_packages }}"

- name: install virtualenv if needed
  pip: name=virtualenv version=15.1.0 state=present
  when: wal_e_virtualenv_python_version is defined and wal_e_virtualenv_python_version != ''

# 'daemontools' provides envdir, but no daemontools rpm is
# avalaible for CentOS 7. Install envdir using pip in all cases.
- name: install envdir python module
  pip: name=envdir state=present

- name: install python dependency modules with pip
  pip:
    name: "{{ item }}"
    virtualenv: "{% if wal_e_virtualenv_python_version is defined and wal_e_virtualenv_python_version != \"\" %}{{ wal_e_virtualenv_path }}{% endif %}"
    virtualenv_python: "{{ wal_e_virtualenv_python_version }}"
  with_items: "{{ wal_e_pips }}"
  when: wal_e_pips

- name: install wal-e from pip
  pip:
    name: "{{ wal_e_name | default('wal-e') }}"
    version: "{{ wal_e_version | default(none) }}"
    virtualenv: "{% if wal_e_virtualenv_python_version is defined and wal_e_virtualenv_python_version != \"\" %}{{ wal_e_virtualenv_path }}{% endif %}"
    virtualenv_python: "{{ wal_e_virtualenv_python_version }}"
  when: wal_e_pips

- name: symlink wal-e in /bin if installed in virtualenv
  file:
    src: "{{ wal_e_virtualenv_path }}/bin/wal-e"
    dest: /bin/wal-e
    state: link
    force: yes
  when: wal_e_virtualenv_python_version is defined and wal_e_virtualenv_python_version != ''

- name: create wal-e envdir for configuration
  file: path="{{ wal_e_envdir }}" state=directory owner="{{ wal_e_user}}" group="{{ wal_e_group }}"

- name: setup AWS credentials AWS_ACCESS_KEY_ID
  copy: |
    content="{{ wal_e_aws_access_key }}"
    dest="{{ wal_e_envdir }}/AWS_ACCESS_KEY_ID"
    owner="{{ wal_e_user}}"
    group="{{ wal_e_group }}"
    mode=0600
  when: wal_e_aws_access_key is defined

- name: setup AWS credentials AWS_ACCESS_KEY_ID
  file: |
    state=absent
    path="{{ wal_e_envdir }}/AWS_ACCESS_KEY_ID"
  when: wal_e_aws_access_key is defined

- name: setup AWS credentials AWS_SECRET_ACCESS_KEY
  copy: |
    content="{{ wal_e_aws_secret_key }}"
    dest="{{ wal_e_envdir }}/AWS_SECRET_ACCESS_KEY"
    owner="{{ wal_e_user}}"
    group="{{ wal_e_group }}"
    mode=0600
  when: wal_e_aws_secret_key is defined

- name: setup AWS credentials AWS_SECRET_ACCESS_KEY
  file: |
    state=absent
    path="{{ wal_e_envdir }}/AWS_SECRET_ACCESS_KEY"
  when: wal_e_aws_secret_key is defined

- name: setup WAL-E S3 endpoint
  copy: |
    content="{{ wal_e_s3_endpoint }}"
    dest="{{ wal_e_envdir }}/WALE_S3_ENDPOINT"
    owner="{{ wal_e_user}}"
    group="{{ wal_e_group }}"
    mode=0600
  when: wal_e_s3_endpoint is defined

- name: setup WAL-E S3 endpoint
  file: |
    state=absent
    path="{{ wal_e_envdir }}/WALE_S3_ENDPOINT"
  when: wal_e_s3_endpoint|default("") == ""

- name: setup WAL-E S3 bucket prefix
  copy: |
    content="{{ wal_e_s3_prefix }}"
    dest="{{ wal_e_envdir }}/WALE_S3_PREFIX"
    owner="{{ wal_e_user}}"
    group="{{ wal_e_group }}"
    mode=0644
  when: wal_e_s3_prefix is defined

- name: setup WAL-E GS prefix
  copy: |
    content="{{ wal_e_gs_prefix }}"
    dest="{{ wal_e_envdir }}/WALE_GS_PREFIX"
    owner="{{ wal_e_user}}"
    group="{{ wal_e_group }}"
    mode=0644
  when: wal_e_gs_prefix is defined

- name: setup WAL-E Google application credentials
  copy: |
    content="{{ wal_e_google_application_credentials }}"
    dest="{{ wal_e_envdir }}/GOOGLE_APPLICATION_CREDENTIALS"
    owner="{{ wal_e_user}}"
    group="{{ wal_e_group }}"
    mode=0644
  when: wal_e_google_application_credentials is defined

# Creates a cron file under /etc/cron.d
- name: Setup cron job for the base backup
  cron: |
    name=wal_e_base_backup
    cron_file=wal_e_base_backup
    minute="{{ wal_e_base_backup_minute }}"
    hour="{{ wal_e_base_backup_hour }}"
    day="{{ wal_e_base_backup_day }}"
    weekday="{{ wal_e_base_backup_weekday}}"
    month="{{ wal_e_base_backup_month }}"
    user="{{ wal_e_user }}"
    job="envdir {{ wal_e_envdir }} wal-e {% if wal_e_aws_instance_profile %}--aws-instance-profile{% endif %} backup-push {{wal_e_base_backup_options}} {{ wal_e_pgdata_dir }}"
    state="{% if wal_e_base_backup_disabled %}absent{% else %}present{% endif %}"

# Creates a cron file under /etc/cron.d
- name: Setup cron job for the rotation of backups
  cron: |
    name=wal_e_backup_delete
    cron_file=wal_e_backup_delete
    minute="{{ wal_e_backup_delete_minute }}"
    hour="{{ wal_e_backup_delete_hour }}"
    day="{{ wal_e_backup_delete_day }}"
    weekday="{{ wal_e_backup_delete_weekday}}"
    month="{{ wal_e_backup_delete_month }}"
    user="{{ wal_e_user }}"
    job="envdir {{ wal_e_envdir }} wal-e {% if wal_e_aws_instance_profile %}--aws-instance-profile{% endif %} delete --confirm retain {{wal_e_backup_delete_retain}}"
    state="{% if wal_e_backup_delete_disabled %}absent{% else %}present{% endif %}"
